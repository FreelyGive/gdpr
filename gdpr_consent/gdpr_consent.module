<?php

/**
 * @file
 * Contains hook implementations and shared functions.
 */

/**
 * Implements hook_help().
 */
function gdpr_consent_help($path, $arg) {
  switch ($path) {
    case 'admin/help#gdpr_consent':
      return t('Extends the GDPR module to record consent from users for certain agreements.');
  }
}

/**
 * Implements hook_menu().
 */
function gdpr_consent_menu() {
  $items = array();

  $items['user/%user/collected_data/agreements'] = array(
    'title' => 'Agreements',
    'description' => 'List Agreement Entities',
    'access callback' => TRUE,
    'page callback' => 'gdpr_consent_collected_agreements',
    'page arguments' => array(1),
    'menu_name' => 'navigation',
    'file' => 'includes/gdpr_consent.agreements.inc',
  );

  return $items;
}


/**
 * Implements hook_entity_info().
 */
function gdpr_consent_entity_info() {
  $info = array();
  $info['gdpr_consent_agreement'] = array(
    'label' => t('GDPR Consent Agreement'),
    'base table' => 'gdpr_consent_agreement',
    'revision table' => 'gdpr_consent_agreement_revision',
    'entity class' => 'Entity',
    'controller class' => 'ConsentAgreementController',
    'fieldable' => TRUE,
    'bundles' => array(
      'gdpr_consent_agreement' => array(
        'label' => t('GDPR Consent Agreement'),
        'admin' => array(
          'path' => 'admin/consent',
          'access arguments' => array('administer site configuration'),
        ),
      ),
    ),
    'entity keys' => array(
      'id' => 'id',
      'label' => 'title',
      'revision' => 'revision_id',
    ),
    // Use the default label() and uri() functions.
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    // Access callback to determine permisisons.
    'access callback' => 'gdpr_consent_access_callback',
    'admin ui' => array(
      'path' => 'admin/consent',
      //'controller class' => 'ConsentAgreementEntityUIController',
      'menu wildcard' => '%entity_object',
      'file' => 'includes/gdpr_consent.admin.inc',
    ),
    'module' => 'gdpr_consent',
  );

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function gdpr_consent_entity_property_info() {
  $info = array();
  $properties = &$info['gdpr_consent_agreement']['properties'];

  $properties['id'] = array(
    'label' => t('GDPR Consent Agreement ID'),
    'description' => t('The uniquie ID of the consent agreement entity.'),
    'type' => 'integer',
    'schema field' => 'id',
  );

  $properties['title'] = array(
    'label' => t('Title'),
    'description' => t('Title of the agreement'),
    'type' => 'text',
    'schema field' => 'title',
  );

  $properties['description'] = array(
    'label' => t('Description'),
    'description' => t('Text displayed to the user on the form'),
    'type' => 'text',
    'schema field' => 'description',
  );

  $properties['long_description'] = array(
    'label' => t('Long Description'),
    'description' => t('Text shown when the user clicks for more details'),
    'type' => 'text',
    'schema field' => 'description',
  );

  $properties['created'] = array(
    'label' => t('Created date'),
    'description' => t('Date the consent agreement was created'),
    'type' => 'date',
    'schema field' => 'created',
  );

  $properties['changed'] = array(
    'label' => t('Updated date'),
    'description' => t('Date the consent agreement was last edited'),
    'type' => 'date',
    'schema field' => 'changed',
  );

  $properties['uid'] = array(
    'label' => t('Authored by'),
    'description' => t('The user ID of author of the Consent Agreement entity.'),
    'type' => 'user',
    'schema field' => 'uid',
  );

  $properties['status'] = array(
    'label' => t('Publishing status'),
    'description' => t('A boolean indicating whether the Consent Agreement is published.'),
    'type' => 'boolean',
    'schema field' => 'status',
  );

  return $info;
}

function gdpr_consent_access_callback($op, $entity = NULL, $account = NULL) {
  return TRUE;
}

/**
 * Custom controller for the gdpr_consent_agreement entity type.
 */
class ConsentAgreementController extends EntityAPIController {

  public function save($entity, DatabaseTransaction $transaction = NULL) {
    if (isset($entity->is_new)) {
      $entity->created = REQUEST_TIME;
    }

    $entity->changed = REQUEST_TIME;

    // Always save new revisions.
    $entity->is_new_revision = TRUE;

    return parent::save($entity, $transaction);
  }
}
