<?php

/**
 * @file
 * Module file for the GDPR Dump module.
 */

/**
 * Implements hook_ctools_plugin_type().
 */
function gdpr_dump_ctools_plugin_type() {
  $plugins['gdpr_sanitizer'] = array(
    'classes' => array('handler'),
    'child plugins' => TRUE,
    'use hooks' => TRUE,
  );

  return $plugins;
}

function gdpr_dump_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'gdpr_dump') {
    return 'plugins/' . $plugin_type;
  }
  if ($owner == 'ctools' && $plugin_type == 'export_ui') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Fetch metadata for all context plugins.
 *
 * @return array
 *   An array of arrays with information about all available panel contexts.
 */
function gdpr_dump_get_gdpr_sanitizers() {
  ctools_include('plugins');

  return ctools_get_plugins('gdpr_dump', 'gdpr_sanitizer');
}

function gdpr_dump_get_gdpr_sanitizer($plugin_id) {
  ctools_include('plugins');

  return ctools_get_plugins('gdpr_dump', 'gdpr_sanitizer', $plugin_id);
}

/**
 * Implements hook_gdpr_dump_default_field_data().
 *
 * Default hook for building field data plugins.
 */
function gdpr_dump_gdpr_dump_default_sanitizer() {
  $export =  array();

  $plugins = gdpr_dump_get_gdpr_sanitizers();

  foreach ($plugins as $name => $plugin) {
    $class = ctools_plugin_get_class($plugin, 'handler');

    if (!$class) {
      continue;
    }

    $export[$name] = $class::create($plugin);
  }

  return $export;
}

/**
 * Implements hook_permission().
 */
function gdpr_dump_permission() {
  $perms = array(
    'administer gdpr sanitizers' => array(
      'title' => t('Administer GDPR sanitizer settings'),
      'restrict access' => TRUE,
    ),
  );

  return $perms;
}
