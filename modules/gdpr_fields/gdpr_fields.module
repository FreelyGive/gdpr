<?php

/**
 * @file
 * Module file for the GDPR Fields module.
 */

/**
 * Implements hook_ctools_plugin_type().
 */
function gdpr_fields_ctools_plugin_type() {
  $plugins['gdpr_data'] = array(
    'classes' => array('handler'),
    'child plugins' => TRUE,
    'use hooks' => TRUE,
  );

  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function gdpr_fields_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'gdpr_fields') {
    return 'plugins/' . $plugin_type;
  }
  if ($owner == 'ctools' && $plugin_type == 'export_ui') {
    return 'plugins/' . $plugin_type;
  }
  if ($owner == 'ctools' && $plugin_type == 'relationships') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Fetch metadata for all context plugins.
 *
 * @return array
 *   An array of arrays with information about all available panel contexts.
 */
function gdpr_fields_get_contexts() {
  ctools_include('plugins');
  ctools_include('export-ui');


//  dpm(ctools_get_plugins('ctools', 'export_ui'));
//  dpm(gdpr_fields_get_gdpr_data());
}

/**
 * Fetch metadata for all context plugins.
 *
 * @return array
 *   An array of arrays with information about all available panel contexts.
 */
function gdpr_fields_get_gdpr_data() {
  ctools_include('plugins');

  return ctools_get_plugins('gdpr_fields', 'gdpr_data');
}

/**
 * Implements hook_menu().
 */
function gdpr_fields_menu() {

}

/**
 * Implements hook_gdpr_fields_default_field_data().
 *
 * Default hook for building field data plugins.
 */
function gdpr_fields_gdpr_fields_default_field_data() {
  $export =  array();

  $plugins = gdpr_fields_get_gdpr_data();
  foreach ($plugins as $name => $plugin) {
    $export[$name] = GDPRFieldData::createFromPlugin($plugin);
  }

  // Scan fields directory for default files.
  $files = file_scan_directory(dirname(__FILE__) . '/default_fields', '/\.field.php/', array('key' => 'name'));
  foreach ($files as $file) {
    $field = new GDPRFieldData();
    if ((include $file->uri) == 1) {
      $name = $field->plugin_type . ':' . $field->name;
      $export[$name] = $field;
    }
  }

  return $export;
}


function gdpr_fields_exluded_entities($relationship) {
  list($field, $from, $to) = explode('-', $relationship['name']);

  $exluded_source = array(
    'gdpr_task',
  );
  $exluded_destination = array(
    'gdpr_task',
  );

  if (in_array($from, $exluded_source)) {
    return TRUE;
  }

  if (in_array($to, $exluded_destination)) {
    return TRUE;
  }

  return FALSE;
}

function gdpr_fields_collect_gdpr_entities(&$entity_list, $entity_type, $entity) {
  // Check for recursion.
  list($entity_id, , $bundle) = entity_extract_ids($entity_type, $entity);
  if (isset($entity_list[$entity_type][$bundle][$entity_id])) {
    return;
  }

  // Set entity.
  $entity_list[$entity_type][$bundle][$entity_id] = $entity;

  ctools_include('context');
  ctools_include('plugins');

  $context = ctools_context_create("entity:{$entity_type}", $entity);

  // Get available relationships from context.
  $available_relationships = array();
  $relationships = ctools_get_relationships();

  // Go through each relationship.
  foreach ($relationships as $rid => $relationship) {
    // For each relationship, see if there is a context that satisfies it.
    if (!$context) {
      var_dump($context);
      var_dump($entity_type);
    }
    if (ctools_context_filter(array($context), $relationship['required context'])) {
      $available_relationships[$rid] = $relationship;
    }
  }

  // @todo Turn these into hooks.
  $allowed_relationships = array(
    'entities_from_schema',
    'entities_from_field',
    'party_from_user',
    'attached_entity_from_party',
  );

  $forbidden_relationships = array(
    'entities_from_field' => 'gdpr_fields_exluded_entities',
    'entities_from_schema' => 'gdpr_fields_exluded_entities',
  );

  foreach ($available_relationships as $relationship_name => $relationship) {
    if (is_numeric(strpos($relationship_name, ':'))) {
      list($rel_plugin, $rel_plugin_name) = explode(':', $relationship_name);
    }
    else {
      $rel_plugin = $relationship_name;
    }

    if (!in_array($rel_plugin, $allowed_relationships)) {
      continue;
    }

    if (in_array($rel_plugin, array_keys($forbidden_relationships))) {
      if ($forbidden_relationships[$rel_plugin]($relationship)) {
        continue;
      }
    }

    // @todo can identifier be loaded elsewhere?
    $relationship['identifier'] = $relationship['title'];

    $entity_contexts = gdpr_fields_get_contexts_from_relationship($relationship, $context);

    if (!is_array($entity_contexts)) {
      $entity_contexts = array($entity_contexts);
    }

    foreach ($entity_contexts as $entity_context) {
      if (!empty($entity_context->data)) {
        list($plugin_type, $entity_type) = explode(':', $entity_context->plugin);
        if (!$entity_type) {
          var_dump($entity_context->plugin);
        }
        gdpr_fields_collect_gdpr_entities($entity_list, $entity_type, $entity_context->data);
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function gdpr_fields_permission() {
  $perms = array(
    'administer gdpr fields' => array(
      'title' => t('Administer GDPR field settings'),
      'restrict access' => TRUE,
    ),
  );

  return $perms;
}

/**
 * Return a context from a relationship.
 *
 * @param array $relationship
 *   The configuration of a relationship. It must contain the following data:
 *   - name: The name of the relationship plugin being used.
 *   - relationship_settings: The configuration based upon the plugin forms.
 *   - identifier: The human readable identifier for this relationship, usually
 *     defined by the UI.
 *   - keyword: The keyword used for this relationship for substitutions.
 *
 * @param ctools_context $source_context
 *   The context this relationship is based upon.
 * @param bool $placeholders
 *   If TRUE, placeholders are acceptable.
 *
 * @return ctools_context|null
 *   A context object if one can be loaded, otherwise NULL.
 *
 * @see ctools_context_get_relevant_relationships()
 * @see ctools_context_get_context_from_relationships()
 */
function gdpr_fields_get_contexts_from_relationship($relationship, $source_context, $placeholders = FALSE) {
  ctools_include('plugins');

  // Attempt to get custom contexts function.
  $function = ctools_plugin_load_function('ctools', 'relationships', $relationship['name'], 'contexts');

  // Fall back on default context function.
  if (!$function) {
    $function = ctools_plugin_load_function('ctools', 'relationships', $relationship['name'], 'context');
  }

  if ($function) {
    // Backward compatibility: Merge old style settings into new style:
    if (!empty($relationship['relationship_settings'])) {
      $relationship += $relationship['relationship_settings'];
      unset($relationship['relationship_settings']);
    }

    $contexts = $function($source_context, $relationship, $placeholders);



    if ($contexts && !is_array($contexts)) {
      $contexts = array($contexts);
    }

    if (!empty($contexts)) {

      foreach ($contexts as &$context) {
        $context->identifier = $relationship['identifier'];
        $context->page_title = isset($relationship['title']) ? $relationship['title'] : '';
        $context->keyword = $relationship['keyword'];
        if (!empty($context->empty)) {
          $context->placeholder = array(
            'type' => 'relationship',
            'conf' => $relationship,
          );
        }
      }
      return $contexts;
    }
  }
  return NULL;
}
